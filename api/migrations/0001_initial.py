# Generated by Django 5.0.2 on 2024-03-19 16:49

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CourtType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CourtTypeT',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=155, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),
                ('phone', models.IntegerField(db_index=True, null=True, unique=True)),
                ('x_pay_phone', models.IntegerField(blank=True, db_index=True, null=True, unique=True)),
                ('x_pay_password', models.CharField(blank=True, max_length=200, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('staff_for', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='staff_for_user', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Court',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=155)),
                ('description', models.TextField()),
                ('price_per_hour', models.IntegerField()),
                ('open', models.TimeField()),
                ('close', models.TimeField()),
                ('location', models.URLField()),
                ('closed_from', models.TimeField(blank=True, null=True)),
                ('closed_to', models.TimeField(blank=True, null=True)),
                ('closed_now', models.BooleanField(blank=True, default=False, null=True)),
                ('offer_price_per_hour', models.IntegerField(blank=True, default=0, null=True)),
                ('offer_from', models.TimeField(blank=True, null=True)),
                ('offer_to', models.TimeField(blank=True, null=True)),
                ('with_ball', models.BooleanField(default=False, null=True)),
                ('ball_price', models.IntegerField(blank=True, default=0, null=True)),
                ('event', models.BooleanField(default=False, null=True)),
                ('event_price', models.IntegerField(blank=True, default=0, null=True)),
                ('event_from', models.TimeField(blank=True, null=True)),
                ('event_to', models.TimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_court', to=settings.AUTH_USER_MODEL)),
                ('type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.courttype')),
                ('type2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.courttypet')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.state')),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('phone', models.CharField(max_length=255)),
                ('book_date', models.DateField()),
                ('total_price', models.IntegerField(blank=True, default=0, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('court', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.court')),
            ],
        ),
        migrations.CreateModel(
            name='CourtAdditional',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('court', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='additional_court', to='api.court')),
            ],
        ),
        migrations.CreateModel(
            name='CourtAdditionalTool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('price', models.IntegerField()),
                ('court_additional', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tools_court', to='api.courtadditional')),
            ],
        ),
        migrations.CreateModel(
            name='BookTime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_from', models.TimeField(blank=True, null=True)),
                ('book_to', models.TimeField(blank=True, null=True)),
                ('book_to_date', models.DateField(blank=True, null=True)),
                ('with_ball', models.BooleanField(blank=True, default=False, null=True)),
                ('event', models.BooleanField(blank=True, default=False, null=True)),
                ('paied', models.CharField(blank=True, choices=[('عند الوصول', 'عند الوصول'), ('محفظة الكترونية', 'محفظة الكترونية')], max_length=155, null=True)),
                ('is_paied', models.BooleanField(blank=True, default=False, null=True)),
                ('is_cancelled', models.BooleanField(blank=True, default=False, null=True)),
                ('is_cancelled_day', models.DateField(blank=True, null=True)),
                ('total_price', models.IntegerField(blank=True, default=0, null=True)),
                ('book', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='book_time', to='api.book')),
                ('tools', models.ManyToManyField(blank=True, null=True, to='api.courtadditionaltool')),
            ],
        ),
        migrations.CreateModel(
            name='CourtFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feature', models.CharField(max_length=155)),
                ('is_free', models.BooleanField(default=False)),
                ('is_available', models.BooleanField(default=True, null=True)),
                ('court', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='court_features', to='api.court')),
            ],
        ),
        migrations.CreateModel(
            name='CourtImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='courts/images/')),
                ('court', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='court_image', to='api.court')),
            ],
        ),
        migrations.CreateModel(
            name='CourtVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(blank=True, null=True, upload_to='videos/')),
                ('court', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='court_video', to='api.court')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot', models.CharField(max_length=100)),
                ('is_sent', models.BooleanField(default=False, null=True)),
                ('book_time', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.booktime')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OverTime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_from', models.TimeField(blank=True, null=True)),
                ('book_to', models.TimeField(blank=True, null=True)),
                ('note', models.TextField(blank=True, null=True)),
                ('price', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('book', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='book_over_time', to='api.book', unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paying_warning', models.CharField(blank=True, max_length=155, null=True)),
                ('paying_time_limit', models.IntegerField(blank=True, default=0, null=True)),
                ('cancel_time_limit', models.IntegerField(blank=True, default=0, null=True)),
                ('total_money', models.IntegerField(default=0, null=True)),
                ('waiting_money', models.IntegerField(default=0, null=True)),
                ('cancelled_money', models.IntegerField(default=0, null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Number',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('setting', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.setting')),
            ],
        ),
    ]
